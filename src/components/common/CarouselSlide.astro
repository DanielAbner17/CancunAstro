---
interface Props {
  imageUrl: string;
  type: 'events' | 'stores';
  alt?: string;
}

const { imageUrl, type, alt } = Astro.props;

/**
 * Returns the source URL for the image to be displayed in the carousel slide.
 * If no image URL is provided, it returns the URL for a default image.
 * The image URL is constructed based on the type and imageUrl parameters.
 *
 * @param {string} type - The type of the image (optional).
 * @param {string} imageUrl - The URL of the image (optional).
 * @returns {string} - The source URL for the image.
 */
const getImageSrc = (type: 'events' | 'stores', imageUrl: string) => {
  let basePath = '/src/images';
  const DEFAULT_FOLDER = 'stores';

  if (!imageUrl) return `${basePath}/404.png`;

  let folder = type ? `${type}` : DEFAULT_FOLDER;

  return `${basePath}/${folder}/${imageUrl}`;
};

const imageSrc = getImageSrc(type, imageUrl);
---

<div class=`slide pl-4 ${type}`>
  <img width={200} height={200} src={imageSrc} alt={alt || ''} class='w-full' />
</div>

<style>
  .slide {
    --slide-items: 1;

    flex: 0 0 calc(100% / var(--slide-items));
    min-width: 0;

    @media (width >=768px) {
      --slide-items: 2;
    }

    @media (width >= 1024px) {
      --slide-items: 3;
    }

    &.stores {
      img {
        max-width: 250px;
        max-height: 100px;
        object-fit: contain;
      }

      @media (width >=768px) {
        --slide-items: 4;
      }

      @media (width >= 1024px) {
        --slide-items: 5;
      }
    }
  }
</style>
